package de.hahn.blog.dumpqueryparameter2.model.adfbc.views;

import java.math.BigDecimal;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jun 06 16:33:24 CEST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegionsViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        RegionId {
            protected Object get(RegionsViewRowImpl obj) {
                return obj.getRegionId();
            }

            protected void put(RegionsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RegionName {
            protected Object get(RegionsViewRowImpl obj) {
                return obj.getRegionName();
            }

            protected void put(RegionsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CountriesView {
            protected Object get(RegionsViewRowImpl obj) {
                return obj.getCountriesView();
            }

            protected void put(RegionsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected abstract Object get(RegionsViewRowImpl object);

        protected abstract void put(RegionsViewRowImpl object, Object value);

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int REGIONID = AttributesEnum.RegionId.index();
    public static final int REGIONNAME = AttributesEnum.RegionName.index();
    public static final int COUNTRIESVIEW = AttributesEnum.CountriesView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public RegionsViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute RegionId.
     * @return the RegionId
     */
    public BigDecimal getRegionId() {
        return (BigDecimal) getAttributeInternal(REGIONID);
    }

    /**
     * Gets the attribute value for the calculated attribute RegionName.
     * @return the RegionName
     */
    public String getRegionName() {
        return (String) getAttributeInternal(REGIONNAME);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link CountriesView.
     */
    public RowIterator getCountriesView() {
        return (RowIterator) getAttributeInternal(COUNTRIESVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

